import pandas as pd
import json
import os

def clean_twitter_json(twitter_json_file='twitter.json', csv_file='top_1000_twitch.csv'):
    """
    Remove keys from twitter.json that are not present in the CSV of top streamers.
    The CSV should have a 'Name' column; keys are generated by removing spaces from these names.
    Returns the cleaned twitter_data dictionary, or None if an error occurs.
    """
    try:
        df = pd.read_csv(csv_file)
    except Exception:
        return None

    allowed_keys = {name.replace(" ", "") for name in df['Name']}

    try:
        with open(twitter_json_file, 'r') as f:
            twitter_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

    extra_keys = [key for key in twitter_data if key not in allowed_keys]
    for key in extra_keys:
        del twitter_data[key]

    with open(twitter_json_file, 'w') as f:
        json.dump(twitter_data, f, indent=4)

    return twitter_data

def remove_duplicate_tweets(twitter_json_file='twitter.json'):
    """
    Remove duplicate tweets for each streamer key in twitter.json.
    Returns the updated twitter_data dictionary, or None if an error occurs.
    """
    try:
        with open(twitter_json_file, 'r') as f:
            twitter_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

    for streamer_key, tweets in twitter_data.items():
        seen = set()
        unique_tweets = []
        for tweet in tweets:
            if tweet not in seen:
                seen.add(tweet)
                unique_tweets.append(tweet)
        twitter_data[streamer_key] = unique_tweets

    with open(twitter_json_file, 'w') as f:
        json.dump(twitter_data, f, indent=4)

    return twitter_data

def count_twitter_keys(twitter_json_file='twitter.json'):
    """
    Count the number of keys in twitter.json.
    Returns the count as an integer, or 0 if an error occurs.
    """
    try:
        with open(twitter_json_file, 'r') as f:
            twitter_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return 0

    return len(twitter_data.keys())

def get_missing_twitter_keys(twitter_json_file='twitter.json', csv_file='top_1000_twitch.csv'):
    """
    Compare allowed streamer keys from the CSV with the keys in twitter.json.
    Returns a set of missing keys, or None if an error occurs.
    """
    try:
        df = pd.read_csv(csv_file)
    except Exception:
        return None

    allowed_keys = {name.replace(" ", "") for name in df['Name']}

    try:
        with open(twitter_json_file, 'r') as f:
            twitter_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

    twitter_keys = set(twitter_data.keys())
    missing_keys = allowed_keys - twitter_keys
    return missing_keys

def get_missing_streamer_ranks(twitter_json_file='twitter.json', csv_file='top_1000_twitch.csv'):
    """
    Compare the CSV's streamers with the keys in twitter.json and return a list of Rank numbers
    for streamers that are missing in twitter.json. Then group consecutive missing ranks into a range.
    For example, if the missing ranks are [2, 3, 4, 7, 8, 10], it returns ["2-4", "7-8", "10"].
    """
    try:
        df = pd.read_csv(csv_file)
    except Exception:
        return None

    try:
        with open(twitter_json_file, 'r') as f:
            twitter_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

    twitter_keys = set(twitter_data.keys())
    missing_ranks = []
    for _, row in df.iterrows():
        # Generate key by removing spaces from the streamer's name
        key = str(row['Name']).replace(" ", "")
        rank = row['Rank']
        if key not in twitter_keys:
            missing_ranks.append(rank)
    
    # Sort the missing ranks and group consecutive numbers
    missing_ranks = sorted(missing_ranks)
    grouped_missing = []
    if missing_ranks:
        start = missing_ranks[0]
        end = missing_ranks[0]
        for rank in missing_ranks[1:]:
            if rank == end + 1:
                end = rank
            else:
                if start == end:
                    grouped_missing.append(str(start))
                else:
                    grouped_missing.append(f"{start}-{end}")
                start = rank
                end = rank
        # Add the final group
        if start == end:
            grouped_missing.append(str(start))
        else:
            grouped_missing.append(f"{start}-{end}")
    return grouped_missing

if __name__ == "__main__":
    _ = clean_twitter_json()
    _ = remove_duplicate_tweets()
    missing_ranks = get_missing_streamer_ranks()
    print(missing_ranks if missing_ranks is not None else [])
