#!/usr/bin/env python3
import pandas as pd
import json

def remove_empty_tweet_entries(twitter_json_file='twitter.json'):
    """
    Identify keys in twitter.json whose tweet list is empty (i.e., []).
    Remove those entries and update the file.
    """
    try:
        with open(twitter_json_file, 'r') as f:
            twitter_data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        print("Error: twitter.json not found or contains invalid JSON.")
        return None

    # Identify keys where the tweet list is empty.
    empty_keys = [key for key, tweets in twitter_data.items() if tweets == []]
    print("Streamers with empty tweets (keys) to be removed:")
    print(empty_keys)

    # Remove entries with empty tweet lists.
    twitter_data = {key: tweets for key, tweets in twitter_data.items() if tweets != []}

    # Write the updated data back to twitter.json.
    with open(twitter_json_file, 'w') as f:
        json.dump(twitter_data, f, indent=4)
    print("twitter.json has been updated by removing streamers with empty tweets.")
    
    return twitter_data

def group_consecutive(ranks):
    """
    Given a sorted list of rank numbers, group consecutive numbers into ranges.
    Returns a list of strings like "801-805", "830-840", etc.
    """
    if not ranks:
        return []
    
    ranges = []
    start = prev = ranks[0]
    
    for rank in ranks[1:]:
        if rank == prev + 1:
            prev = rank
        else:
            if start == prev:
                ranges.append(f"{start}")
            else:
                ranges.append(f"{start}-{prev}")
            start = prev = rank
    # Append the final group
    if start == prev:
        ranges.append(f"{start}")
    else:
        ranges.append(f"{start}-{prev}")
    return ranges

def check_missing_from_csv(twitter_json_file='twitter.json', csv_file='top_1000_twitch.csv'):
    """
    Compare the keys from the CSV (streamer names with spaces removed and converted to uppercase)
    against the keys in twitter.json.
    Group the missing streamers by their 'Rank' as defined in the CSV and print the ranges.
    """
    try:
        df = pd.read_csv(csv_file)
    except Exception as e:
        print("Error reading CSV file:", e)
        return

    # Create a mapping of key -> rank based on the CSV.
    # Keys are generated by removing spaces and converting to uppercase.
    csv_keys = {}
    for _, row in df.iterrows():
        key = str(row['Name']).replace(" ", "").upper()
        rank = int(row['Rank'])
        csv_keys[key] = rank

    try:
        with open(twitter_json_file, 'r') as f:
            twitter_data = json.load(f)
    except Exception as e:
        print("Error reading twitter.json:", e)
        return

    twitter_keys = set(twitter_data.keys())
    
    # Identify keys (and their ranks) that are in the CSV but missing from twitter.json.
    missing_ranks = [rank for key, rank in csv_keys.items() if key not in twitter_keys]
    missing_ranks.sort()

    print("Missing streamers by rank from twitter.json (based on CSV):")
    print(missing_ranks)
    
    # Group consecutive ranks into ranges.
    missing_ranges = group_consecutive(missing_ranks)
    print("Grouped missing rank ranges:")
    print(missing_ranges)
    
    return missing_ranges

if __name__ == "__main__":
    # First, remove entries with empty tweet lists.
    remove_empty_tweet_entries()
    
    # Then, check which streamers (by CSV rank) are missing from twitter.json and group them.
    check_missing_from_csv()
